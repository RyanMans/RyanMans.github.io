<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[App 开发、推送、上架证书]]></title>
    <url>%2F2018%2F12%2F29%2FiOS-%E8%AF%81%E4%B9%A6%E7%AF%87%2F</url>
    <content type="text"><![CDATA[一. 前期准备12个人开发者或者企业开发者账号申请已有账号,则直接登录, 开发者中心 https://developer.apple.com/ 开发者中心页面: 二、证书申请 2.1 创建App ID 选择Identifiers下的All IDs，右侧显示了所有已创建的App ID,点击右上角“+”新建: 信息填写(生成id)1234567891011App ID Description: 填写容易辨识的名称(可用项目名称,不可用中文)App ID Suffix:(2种) 1.Explicit App ID(首选) : 精确型, Bundle ID需要填写和你的项目名称一模一样, 例如com.xk.movie 2.Wildcard App ID：通配型,bundle ID只需要填写前缀即可：com.artron.＊,这样只要是项目的Bundle Identifier的前缀和这个一样都可以使用 通常项目开发,都是使用第一种精确型,确保唯一匹配 App Services: 应用需要用到的服务,如果有使用推送功能,则需要勾选Push Notification. 可后期编辑时,再补充 2.2 创建Certificate证书2.2.1 创建证书请求文件1步骤: 电脑应用程序 -&gt; 使用工具 -&gt; 钥匙串访问 -&gt; 证书助理 -&gt; 从证书颁发机构请求证书 钥匙串工具 证书信息填写 12345电子邮箱地址: 可以随意填写邮箱地址(有效)常用名称: 容易辨识的名称(会显示到钥匙串), 可填写项目名称选择存储到磁盘,点击继续保存到桌面, 则会生成一个CertificateSigningRequest.certSigningRequest的证书请求文件 2.2.2 制作Certificate证书证书中心123Development: 开发证书 Production : 推送证书 APN : 推送证书每一个证书都需要单独创建,可使用同一个CertificateSigningRequest.certSigningRequest的证书请求文件 证书制作: 选择对应的APP ID 上传certSigningRequest的证书请求文件 123如果是发布到AppStore,就选Production下的App Store and Ad Hoc;上传好请求文件后,会生成生成一个ios_development.cer证书文件, 点击download, 双击安装到钥匙串中（如果安装不上，可以直接将证书文件拖拽到钥匙串访问的列表中） 2.3 制作 Provisioning Profile描述文件(PP证书)选择Provisioning Profiles下的All，右侧显示了所有已创建的profile,点击右上角“+”新建: 选择对应的APP ID 选择对应的证书 填写profile名称 12为你的描述证书起个名字,一般是项目名称,继续即可完成创建,然后下载到电脑,双击即可安装到Xcode中;到此,证书的申请基本完成 三、项目配置(Xcode)3.1 添加开发者账号 3.2 Xcode证书配置1Xcode target -&gt; General -&gt; Singning (勾选 Automatically manage signing) -&gt; 编译项目 四、项目打包(Xcode)1234567891011121314 Xcode真机模式 -&gt; Product -&gt; Archive 打包 ``` ![](https://note.youdao.com/yws/public/resource/38dc19ea5dd9780888d7e6fbe37fa670/xmlnote/9461CFC150434CF78F7521CEF4D0C783/1549)![](https://note.youdao.com/yws/public/resource/38dc19ea5dd9780888d7e6fbe37fa670/xmlnote/510BB7D984A14A7B90F1BDE9D0CAD7B5/1552)##### 4.1 上传到App Store###### 直接在打包工具上传![](https://note.youdao.com/yws/public/resource/38dc19ea5dd9780888d7e6fbe37fa670/xmlnote/9E832327566B4ED69EEFB414D30E27B6/1559)##### 4.2 导出ipa文件,使用Application Loader上传到App Store 打包工具 archive export -&gt; ipa文件(全部next,默认选中) -&gt; 生成ipa文件 Xcode (open Developer Tool) -&gt; Application Loader -&gt; 选中本地ipa文件上传 12345![](https://note.youdao.com/yws/public/resource/38dc19ea5dd9780888d7e6fbe37fa670/xmlnote/9A326A969C2E4D869A19428773C1757F/1581)![](https://note.youdao.com/yws/public/resource/38dc19ea5dd9780888d7e6fbe37fa670/xmlnote/CEDA7C8CD6B94615AAD67C830941BA6A/1580)![](https://note.youdao.com/yws/public/resource/38dc19ea5dd9780888d7e6fbe37fa670/xmlnote/B0FF6A47814E4BA9BD395EAEB6AB6215/1579) 注意: 两种方式都需要耐心等待, 都是在验证ipa二进制数据, 所以会有点忙, 尽量在网络环境好的条件下上传1#### 五、App Store Connect 提交审核 ipa 文件上传成功后, 可在此区域查看到上传到项目版本, 以及处理状态12345678910![](https://note.youdao.com/yws/public/resource/38dc19ea5dd9780888d7e6fbe37fa670/xmlnote/WEBRESOURCE836afe5098c96d2d045c3693bc086809/1601)#### 六、App Store Connect 基本信息填写##### 6.1 新建app ![](https://note.youdao.com/yws/public/resource/38dc19ea5dd9780888d7e6fbe37fa670/xmlnote/8A8DFA4DE17A4146A56263874DE8E921/1610) 注意:套装id 和 SKU 都可以填写项目的bundleid, 和开发者中心的证书bundleid一致,且在应用创建后,这两个不可再更改123##### 6.2 App Information ![](https://upload-images.jianshu.io/upload_images/1928848-39f68aa263a559cc.png?imageMogr2/auto-orient/) Privacy Policy URL(隐私政策) : 可选项,可以不填写 Category(类别):选择你的应用的分类 Pricing and Availability: 选择价格信息即可 12345678910![](https://note.youdao.com/yws/public/resource/38dc19ea5dd9780888d7e6fbe37fa670/xmlnote/39FE15FC78BF4AB3828359C018581D1D/1642)![](https://note.youdao.com/yws/public/resource/38dc19ea5dd9780888d7e6fbe37fa670/xmlnote/A80D60A08B7A4B9C8F18DD0666505686/1638)![](https://note.youdao.com/yws/public/resource/38dc19ea5dd9780888d7e6fbe37fa670/xmlnote/E80DD2D4F33B4C9E8A91B50D1D4F4B9F/1639)![](https://note.youdao.com/yws/public/resource/38dc19ea5dd9780888d7e6fbe37fa670/xmlnote/37DF694A147446B5B34BD9FB0A446C84/1640)![](https://note.youdao.com/yws/public/resource/38dc19ea5dd9780888d7e6fbe37fa670/xmlnote/6744DC2AA6344D01AAAA21B0E6870FC3/1655) app预览和应用截图, 可以使用6.5英寸(1242 x 2688)和5.5英寸(1242 x 2208)的size App Icon : 像素为1024 x 1024的无圆角,无透明像素的图标 手机号码: 需要加+86 ,例如 +8613666666666 Demo Account:测试账号,如果你的应用需要登录,请提供一个开启了所有权限的测试账号 Notes: 其他你认为有必要告诉苹果的审核人员的信息可以写在这里; 注: 联系方式,姓名等信息尽可能真实, 要确保能够正常联系到, 已防止审核过程中出现问题, 苹果官方审核团队会致电通知 `]]></content>
      <categories>
        <category>Object-C</category>
      </categories>
      <tags>
        <tag>Object-C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重楼的博客]]></title>
    <url>%2F2018%2F12%2F27%2F%E9%87%8D%E6%A5%BC%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[简介大家好,我是重楼]]></content>
      <categories>
        <category>个人</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>实战经验</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2016%2F06%2F06%2F%E5%85%B3%E4%BA%8Eframwrok%E5%88%B6%E4%BD%9C%E9%9D%99%E6%80%81%E5%BA%93%2F</url>
    <content type="text"><![CDATA[framework打包静态库文档修订控制 序号 修改时间 修改人 版本 备注 1 2016.4.5 黄炎桂 1.0 目录1 引言 1.1 培训目的 1.2 参考资料 1.3 术语和缩写词 2 framework与静态库 2.1 制作framework静态库 2.2 制作通用framework静态库 3 使用framework静态库 4 制作通用framework静态库脚本问题 5 framework导入工程后包冗余问题 1 引言：1.1 培训目的：framework是在iOS 8后推出的，常常被用来当作库使用。现在Xcode已经不允许我们自己生成.Dylib文件。 不过.a文件还是允许的。.a静态库和framework的静态库都各有优点，下面简单介绍如何制作framework的静态库。 1.2 参考资料ios教程-创建静态库 1.3 术语和缩写词无 2 framework与静态库2.1 制作framework静态库用framework打包的静态库能够包含图片、xib等资源。 而用.a打包的静态库，我们需要再建立一个Bundle文件来包含图片、xib等资源 先创建一个framework 将链接时生成的执行文件类型设置成static类型／动态库时则选择dynamic类型 设置framework包含多种架构 真机（armv7＝3gs-4s，armv7s＝5-5c， arm64＝5s-6plus） 模拟器（i386=3gs-5，x86_64=5s-6plus） 将xib、图像资源包含到framework中，将需要暴露的.h文件放在Public中，需要编译的.m文件放在Compile Sources 在建立framework时自动生成的头文件中加入要暴露的头文件.h，否则会报Warning 选中真机／模拟器，Command＋B 编译，生成只支持真机／模拟器的静态库 对.framework 右键 Show In Finder 找到对应的静态库，END 2.2 制作通用framework静态库制作通用库主要利用到Aggregate，其主要有两个特性 1、能给一次编译多个target 2、能够在编译的时候运行自定义脚本（target也可以） 建立Aggregate文件 编写自定义shell脚本 # define output folder environment variable UNIVERSAL_OUTPUTFOLDER=${BUILD_DIR}/${CONFIGURATION}-universal # make sure the output directory exists mkdir -p &quot;${UNIVERSAL_OUTPUTFOLDER}&quot; # copy the header file to universal dir，make sure your &quot;${CONFIGURATION}-iphoneos/usr&quot; dir exists cp -R &quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/${PROJECT_NAME}.framework&quot; &quot;${UNIVERSAL_OUTPUTFOLDER}/&quot; # Create universal binary file using lipo lipo -create -output &quot;${UNIVERSAL_OUTPUTFOLDER}/${PROJECT_NAME}.framewrok/${PROJECT_NAME}&quot; &quot;${BUILD_DIR}/${CONFIGURATION}-iphoneos/${PROJECT_NAME}.framewrok/${PROJECT_NAME}&quot; &quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/${PROJECT_NAME}.framewrok/${PROJECT_NAME}&quot; open &quot;${UNIVERSAL_OUTPUTFOLDER}&quot; 判断是否支持模拟器跟真机，使用inpo测试的时候得先确定你打包使用的Xcode是你系统默认打开的Xcode（多个Xcode存在需要考虑的情况），打开终端，cd 到你的framework文件目录中，使用lipo -info xxx,即可在终端看到返回的信息。 检查framework的时候需要选择.framework里面的exec文件，如图： 接下来就可以直接使用Debug-universal里面的framework了 3 使用framework静态库 新建一个工程，将framework静态库拖入工程中，并选中copy item选项 在Build Phrase中配置如下，Copy Bundle Resources会将资源保存到Main Bundle中，可以使用NSBundle接口获取资源 在头文件中添加需要的库的头文件 4 制作通用framework静态库脚本问题： 以上打包都是使用Debug模式，若想要发布可以打包成Release模式，在Edit Scheme里面设置即可，然后在打包通用库的时候需要将Run Script脚本中的Debug字眼改成Release 若Xcode版本为7.3,在打包通用库的时候如果脚本失效，可以试下一下脚本。 #存放framework的目录 UNIVERSAL_OUTPUTFOLDER=${BUILD_DIR}/framework-universal SIMULATOR_OUTPUTFOLDER=${BUILD_DIR}/framework-iphonesimulator IPHONEOS_OUTPUTFOLDER=${BUILD_DIR}/framework-iphoneos #IPHONE_DEVICE_BUILD_DIR=${BUILD_DIR}/${CONFIGURATION}-iphoneos WORKSPACE_NAME=${PROJECT_NAME}.xcodeproj BUILD_SCHEME=${PROJECT_NAME} IPHONEOS_BUNDLE_DIR=&quot;Build/Products/Release-iphoneos&quot; SIMULATOR_BUNDLE_DIR=&quot;Build/Products/Release-iphonesimulator&quot; #先删除已成生的framework, 再生成 rm -rf &quot;${SIMULATOR_OUTPUTFOLDER}&quot; rm -rf &quot;${IPHONEOS_OUTPUTFOLDER}&quot; rm -rf &quot;${UNIVERSAL_OUTPUTFOLDER}&quot; cd ${SRCROOT} #模拟器 xcodebuild -project ${WORKSPACE_NAME} -scheme ${BUILD_SCHEME} -arch i386 -arch x86_64 -sdk iphonesimulator -configuration &quot;RELEASE&quot; -derivedDataPath &quot;${SIMULATOR_OUTPUTFOLDER}&quot; #真机 xcodebuild -project ${WORKSPACE_NAME} -scheme ${BUILD_SCHEME} -sdk iphoneos -configuration &quot;RELEASE&quot; -derivedDataPath &quot;${IPHONEOS_OUTPUTFOLDER}&quot; #合并模拟器和真机的架构 mkdir -p &quot;${UNIVERSAL_OUTPUTFOLDER}&quot; cp -R &quot;${IPHONEOS_OUTPUTFOLDER}/${IPHONEOS_BUNDLE_DIR}/${PROJECT_NAME}.framework&quot; &quot;${UNIVERSAL_OUTPUTFOLDER}/${PROJECT_NAME}.framework&quot; lipo -create &quot;${SIMULATOR_OUTPUTFOLDER}/${SIMULATOR_BUNDLE_DIR}/${PROJECT_NAME}.framewrok/${PROJECT_NAME}&quot; &quot;${IPHONEOS_OUTPUTFOLDER}/${IPHONEOS_BUNDLE_DIR}/${PROJECT_NAME}.framewrok/${PROJECT_NAME}&quot; -output &quot;${UNIVERSAL_OUTPUTFOLDER}/${PROJECT_NAME}.framewrok/${PROJECT_NAME}&quot; rm -rf &quot;${SIMULATOR_OUTPUTFOLDER}&quot; rm -rf &quot;${IPHONEOS_OUTPUTFOLDER}&quot; open &quot;${UNIVERSAL_OUTPUTFOLDER}&quot; 当静态库中包含Category的时候，会报错，原因是跟OC的runtime机制有关。可以使用Linker的linker flags来设置 静态库中如果包含xib资源，使用NSBundle读取，例如在init方法里面 self = [[[NSBundle mainBundle] loadNibNamed:@&quot;static.framewrok/MDSquareNumberView&quot; owner:nil options:nil] lastObject] ; 静态库如果包含图片资源，需要对图片的路径加上打包后的名字.framework，例如打包后的为staticDemo.framework,代码则需要在使用图片时加上 img.image = [UIImage imageNamed:@&quot;static.framewrok/gesture_node_normal.png&quot;]; `使用framework的缺点：` 1、工程使用framework时，会造成最后包很大。 2、由于打包后xib、图片资源的使用路径发生改变，需要在代码或者xib上额外设置，消耗精力。 5 framework导入工程后包冗余问题 问：拖动.framework到工程的时候，.framework是生成在哪个目录?Copy Bundle Resources呢？ 答：拖动的时候，会在.app包里面生成一个Frameworks目录，.framework就是保存在该目录中。 Copy Bundle Resources的时候是在根目录中直接生成.framework文件 在Embed Frameworks的时候，需要设置目标文件，默认是Frameworks，这样在工程打包成.app的时候会生 成一个Frameworks的目录，然后把.framework放在该目录中。如下图： 问：如何保证工程在编译的时候会Link到对应的framework？ 答：在Build Settings中可以配置链接的路径，如下图。这个路径就是就是Link的路径，@executable_path表示.app的根目录。这个路径必须跟Embed frameworks设置的目标文件路径一样，不然会出错。Embed frameworks的时候默认为Frameworks，Runpath Search Paths默认的路径也是@executable_path/Frameworks 问：如何解决工程引入第三方.framework后造成工程冗余的问题 答：根据前面两点可以知道，引入工程需要设置 Embed framework 跟 Copy Bundle Resources ，这两个操作都会生成framework，正是因为生成两个framework导致工程变冗余。因此，只要想办法让他们生成一个.framework就能解决问题了。 只要设置他们路径一致即可。Copy Bundle Resources的路径是默认在.app的根目录，更改不了，而 Embed framework操作的目录我们可以更改，通过改变 Destination 为 Resources 就能让.framewrok产生在根目录，此时 Link 的目录也必须更改成 @executable_path 配置如图： 提示：以上测试环境在Xcode7.2上运行。 （动态库的使用有待研究，暂时就不发出来了…）如果还有需要注意的，以后再补充… 地址：广州市天河区长湴白沙水路89号长湴创意园A栋 邮编：510000 公司网址：www.minstone.com.cn Copyright &copy; 2016年 Minstone. All rights reserved.]]></content>
  </entry>
</search>
